% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hergm.R
\name{hergm}
\alias{hergm}
\title{Hierarchical exponential-family random graph models (HERGMs) with local dependence}
\usage{
hergm(
  object,
  n_clusters,
  n_cores = 1,
  block_membership = NULL,
  estimate_parameters = TRUE,
  verbose = 0,
  n_em_step_max = 100,
  initialization_method = 1,
  use_infomap_python = FALSE,
  seed_infomap = NULL,
  weight_for_initialization = 1000,
  seeds = NULL,
  initialized_cluster_data = NULL,
  method_second_step = "MPLE",
  clustering_with_features = TRUE,
  list_multiplied_feature_matrices = NULL,
  fix_covariate_parameter = FALSE,
  compute_pi = FALSE,
  check_alpha_update = FALSE,
  check_block_membership = FALSE,
  ...
)
}
\arguments{
\item{object}{A formula or \code{lighthergm} class object. A \code{lighthergm} is returned by \code{hergm()}.
When you pass a \code{lighthergm} class object to \code{hergm()}, you can restart the EM step.}

\item{n_clusters}{The number of blocks. This must be specified by the user.
When you pass a "lighthergm" class object to \code{hergm()}, you don't have to specify this argument.}

\item{n_cores}{The number of CPU cores to use.}

\item{block_membership}{The pre-specified block memberships for each node.
If \code{NULL}, the latent community structure is estimated, assuming that the number of communities is \code{n_clusters}.}

\item{estimate_parameters}{If \code{TRUE}, both clustering and parameter estimation are implemented.
If \code{FALSE}, only clustering is executed.}

\item{verbose}{A logical or an integer: if this is TRUE/1,
the program will print out additional information about the progress of estimation and simulation.
A higher value yields lower level information.}

\item{n_em_step_max}{The maximum number of EM iterations.
Currently, no early stopping criteria is introduced. Thus \code{n_em_step_max} EM iterations are exactly implemented.}

\item{initialization_method}{Cluster initialization method.
If \code{1} (the default), \code{igraph}'s infomap is implemented.
If \code{2}, the initial clusters are randomly uniformally selected.
If \code{3}, spectral clustering is conducted.}

\item{use_infomap_python}{If \code{TRUE}, the cluster initialization is implemented using Pythons' infomap.
When using this, make sure that Python's infomap is installed and callable from `system().}

\item{seed_infomap}{seed value (integer) for Python's infomap.}

\item{weight_for_initialization}{weight value used for cluster initialization. The higher this value, the more weight is put on the initialized alpha.}

\item{seeds}{seed value (integer) for the random number generator}

\item{initialized_cluster_data}{initialized cluster data from which the EM iterations begin.
This can be either a vector of block affiliations of each node or initialized cluster data by Python's infomap (given by .clu format).}

\item{method_second_step}{If "MPLE" (the default), then the maximum pseudolikelihood estimator is implemented when estimating the within-block network model.
If "MLE", then an approximate maximum likelihood estimator is conducted.}

\item{clustering_with_features}{If \code{TRUE}, clustering is implemented using the discrete covariates specified in the formula.}

\item{list_multiplied_feature_matrices}{a list of multiplied feature adjacency matarices necessary for EM step.
If \code{NULL}, \code{hergm()} automatically calculates. Or you can calculate by \code{compute_multiplied_feature_matrices()}.}

\item{fix_covariate_parameter}{If \code{TRUE}, when estimating the within-block network model,
parameters for covariates are fixed at the estimated of the between-block network model.}

\item{compute_pi}{If \code{TRUE}, this function keeps track of pi matrices at each EM iteration.
If the network is large, we strongly recommend to set to be \code{FALSE}.}

\item{check_alpha_update}{If \code{TRUE}, this function keeps track of alpha matrices at each EM iteration.
If the network is large, we strongly recommend to set to be \code{FALSE}.}

\item{check_block_membership}{If TRUE, this function keeps track of estimated block memberships at each EM iteration.}

\item{...}{Additional arguments, to be passed to lower-level functions}
}
\description{
The function hergm estimates and simulates three classes of hierarchical exponential-family random graph models.
}
\examples{
# Load an embedded network object.
data(toyNet)

# Specify the model that you would like to estimate.
model_formula <- toyNet ~ edges + nodematch("x") + nodematch("y") + triangle

# Estimate the model
hergm_res <-
  lighthergm::hergm(
    object = model_formula, # The model you would like to estiamte
    n_clusters = 4, # The number of blocks
    n_em_step_max = 100, # The maximum number of EM algorithm steps
    estimate_parameters = TRUE, # Perform parameter estimation after the block recovery step
    clustering_with_features = TRUE, # Indicate that clustering must take into account nodematch on characteristics
    check_block_membership = TRUE # Keep track of block memberships at each EM iteration
  )
}
